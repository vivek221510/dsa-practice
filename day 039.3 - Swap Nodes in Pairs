// 24. Swap Nodes in Pairs

// Description:  
// Given a linked list, swap every two adjacent nodes and return its head.  
// You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed).

// Example:  
// Input: head = [1,2,3,4]  
// Output: [2,1,4,3]

// Time Complexity: O(n)  
// Space Complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        if (head == null || head.next == null) return head;

        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode ans = dummy;

        while (dummy.next != null && dummy.next.next != null) {
            ListNode temp = dummy.next.next.next;
            dummy.next.next.next = dummy.next;
            ListNode t = dummy.next.next;
            dummy.next.next = temp;
            dummy.next = t;
            dummy = dummy.next.next;
        }
        return ans.next;
    }
}
