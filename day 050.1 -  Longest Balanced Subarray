## ðŸ§® Longest Balanced Subarray (LeetCode)

### ðŸ“˜ Problem
Given an integer array `nums`, find the **length of the longest subarray** such that the number of **distinct even elements** and **distinct odd elements** in that subarray are equal.

---

### ðŸ’¡ Approach
For every possible subarray starting at index `i`, we maintain two sets:
- `even` â†’ stores distinct even numbers  
- `odd` â†’ stores distinct odd numbers  

If at any point their sizes become equal, we update the maximum length.

This brute-force approach works correctly for small arrays.

---

### ðŸ§  Complexity
- **Time Complexity:** O(nÂ²)  
- **Space Complexity:** O(n)

---

### ðŸ§¾ Code
```java
import java.util.*;

class Solution {
    public int longestBalanced(int[] nums) {
        int n = nums.length;
        int ans = 0;

        for (int i = 0; i < n; i++) {
            Set<Integer> even = new HashSet<>();
            Set<Integer> odd = new HashSet<>();

            for (int j = i; j < n; j++) {
                if (nums[j] % 2 == 0)
                    even.add(nums[j]);
                else
                    odd.add(nums[j]);

                if (even.size() == odd.size())
                    ans = Math.max(ans, j - i + 1);
            }
        }
        return ans;
    }
}
