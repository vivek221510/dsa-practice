/**
 * Problem: Find Largest Value in Each Tree Row
 * 
 * Given the root of a binary tree, return a list of integers where each integer
 * represents the largest value in that level (row) of the tree.
 * 
 * Example:
 * Input:
 *         1
 *        / \
 *       3   2
 *      / \   \
 *     5   3   9
 * Output: [1, 3, 9]
 * Explanation:
 * Level 1: 1 → max = 1
 * Level 2: 3, 2 → max = 3
 * Level 3: 5, 3, 9 → max = 9
 * 
 * Approach:
 * Use level-order traversal (BFS) to visit nodes level by level.
 * For each level, track the maximum value and add it to the result list.
 * 
 * Time Complexity: O(N), where N is the number of nodes.
 * Space Complexity: O(W), where W is the maximum width of the tree (queue size).
 */

import java.util.*;

class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        if (root == null) return list;

        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);

        while (!q.isEmpty()) {
            int max = Integer.MIN_VALUE;
            int n = q.size();

            for (int i = 0; i < n; i++) {
                TreeNode node = q.poll();
                max = Math.max(max, node.val);

                if (node.left != null) q.add(node.left);
                if (node.right != null) q.add(node.right);
            }

            list.add(max);
        }

        return list;
    }
}
