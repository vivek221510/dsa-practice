/*
🚀 LeetCode 387: First Unique Character in a String

✅ Task:
Given a string `s`, find the first non-repeating character in it 
and return its index. If it does not exist, return -1.

---

Example 1:
Input: s = "leetcode"
Output: 0
Explanation: 'l' is the first character that does not repeat.

Example 2:
Input: s = "loveleetcode"
Output: 2
Explanation: 'v' is the first non-repeating character.

Example 3:
Input: s = "aabb"
Output: -1
Explanation: Every character repeats.

---

💡 Approach:
1. Traverse the string and store the frequency of each character in a HashMap.
2. Traverse again to find the first character with frequency = 1.
3. Return its index; otherwise, return -1.

---

⏱️ Time Complexity: O(n)  
   - One pass to build the frequency map (O(n))  
   - One pass to find the first unique character (O(n))  
   - Overall linear in string length.  

💾 Space Complexity: O(1)  
   - HashMap stores at most 26 lowercase English letters → constant space.

---

✅ Solution Code:
*/

class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character,Integer> map= new HashMap<>();
        int n = s.length();
        
        // Count frequency of each character
        for(int i = 0; i < n; i++) {
            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
        }
        
        // Find first unique character
        for(int i = 0; i < n; i++) {
            if(map.get(s.charAt(i)) == 1) return i;
        }
        
        return -1;
    }
}
