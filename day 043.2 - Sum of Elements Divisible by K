/*
Sum of Elements Divisible by K

You are given an integer array nums and an integer k.

A number is considered valid if the count of its occurrences in nums is divisible by k.
You need to find the sum of all valid numbers multiplied by their frequencies.

Return the total sum.

Example 1:
Input: nums = [2,2,3,3,3,4], k = 2
Output: 8
Explanation:
- The number 2 appears 2 times → 2 % 2 == 0 → contributes 2 * 2 = 4
- The number 3 appears 3 times → 3 % 2 != 0 → ignored
- The number 4 appears 1 time → 1 % 2 != 0 → ignored
Total = 4

Example 2:
Input: nums = [1,1,1,2,2,3], k = 3
Output: 3
Explanation:
Only number 1 appears 3 times, which is divisible by 3, contributing 1 * 3 = 3.

Constraints:
1 <= nums.length <= 100
1 <= nums[i] <= 100
1 <= k <= 100

Time Complexity: O(n + 100)
Space Complexity: O(100)
*/

class Solution {
    public int sumDivisibleByK(int[] nums, int k) {
        int cnt[] = new int[101];
        for(int i = 0; i < nums.length; i++) {
            cnt[nums[i]]++;
        }

        int ans = 0;
        for(int i = 0; i <= 100; i++) {
            if(cnt[i] % k == 0) {
                ans += cnt[i] * i;
            }
        }
        return ans;
    }
}
