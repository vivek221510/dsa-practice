```markdown
/*
üöÄ LeetCode 3541: Find Most Frequent Vowel and Consonant

‚úÖ Task:
- Find the vowel ('a', 'e', 'i', 'o', 'u') with the maximum frequency in the string.
- Find the consonant (all other letters) with the maximum frequency.
- Return the sum of both frequencies.

Example:
Input: s = "successes"
Output: 6  // because max vowel freq = 2 ('e'), max consonant freq = 4 ('s')

‚è± Time Complexity: O(n)
üß± Space Complexity: O(1)  // At most 26 entries in each map
*/

import java.util.HashMap;
import java.util.Map;

class Solution {
    public int maxFreqSum(String s) {
        // Maps to store frequency of vowels and consonants
        HashMap<Character, Integer> v = new HashMap<>();
        HashMap<Character, Integer> c = new HashMap<>();
        
        // Step 1: Count frequencies of vowels and consonants
        for (int i = 0; i < s.length(); i++) {
            char x = s.charAt(i);
            
            if (x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u') {
                v.put(x, v.getOrDefault(x, 0) + 1);
            } else {
                c.put(x, c.getOrDefault(x, 0) + 1);
            }
        }
        
        // Step 2: Find maximum vowel frequency
        int maxval = 0;
        for (Map.Entry<Character, Integer> entry : v.entrySet()) {
            if (entry.getValue() > maxval) {
                maxval = entry.getValue();
            }
        }
        
        // Step 3: Find maximum consonant frequency
        int maxVal = 0;
        for (Map.Entry<Character, Integer> entry : c.entrySet()) {
            if (entry.getValue() > maxVal) {
                maxVal = entry.getValue();
            }
        }
        
        // Step 4: Return the sum of the two maximum frequencies
        return maxval + maxVal;
    }
    
}
```
