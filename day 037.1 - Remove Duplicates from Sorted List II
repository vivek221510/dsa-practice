// 82. Remove Duplicates from Sorted List II

// Description:
// Removes all nodes that have duplicate numbers from a sorted linked list, 
// ensuring only distinct numbers remain in the list.

// Example:
// Input: head = [1,2,3,3,4,4,5]
// Output: [1,2,5]

// Time Complexity: O(n)
// Space Complexity: O(1)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null) return head;

        int[] freq = new int[201];
        ListNode temp = head;

        // Count frequency of each value
        while (temp != null) {
            freq[temp.val + 100]++;
            temp = temp.next;
        }

        // Dummy node setup
        ListNode dummy = new ListNode(-1000);
        ListNode nn = dummy;
        temp = head;

        // Link only unique nodes
        while (temp != null) {
            int x = temp.val;
            if (freq[x + 100] == 1) {
                nn.next = temp;
                nn = nn.next;
            }
            temp = temp.next;
        }

        // Disconnect from any old nodes
        nn.next = null;

        return dummy.next;
    }
}
