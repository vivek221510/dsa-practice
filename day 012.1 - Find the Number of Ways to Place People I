// DAY 12
// QUESTION: LeetCode 3025 - Find the Number of Ways to Place People I
//
// You are given a 2D array points of size n x 2 representing integer coordinates of some points on a 2D plane.
//
// A pair of points (A, B) is valid if:
//   1. A is on the upper-left side of B.
//   2. There are no other points in the rectangle (or line) they form (including the border).
//
// Return the number of such valid pairs.
//
// Example 1:
// Input: points = [[1,1],[2,2],[3,3]]
// Output: 0
//
// Example 2:
// Input: points = [[6,2],[4,4],[2,6]]
// Output: 2
//
// Example 3:
// Input: points = [[3,1],[1,3],[1,1]]
// Output: 2
//
// Constraints:
// 2 <= n <= 50
// 0 <= points[i][0], points[i][1] <= 50
// All points[i] are distinct
//
class Solution {
    public int numberOfPairs(int[][] points) {
        int ans = 0;
        int n = points.length;

        for (int i = 0; i < n; i++) {
            int[] bottomRight = points[i];
            for (int j = 0; j < n; j++) {
                int[] topLeft = points[j];

                // ensure topLeft is upper-left of bottomRight
                if (i == j || !(bottomRight[0] >= topLeft[0] && bottomRight[1] <= topLeft[1])) {
                    continue;
                }

                boolean valid = true;

                for (int k = 0; k < n; k++) {
                    if (k == j || k == i) continue;
                    int[] blocker = points[k];

                    // if blocker lies inside or on the rectangle border, invalidate this pair
                    if (blocker[0] >= topLeft[0] && blocker[0] <= bottomRight[0] &&
                        blocker[1] <= topLeft[1] && blocker[1] >= bottomRight[1]) {
                        valid = false;
                        break;
                    }
                }

                if (valid) ans++;
            }
        }
        return ans;
    }
}
