/*
ðŸ§© Problem: Binary Tree Postorder Traversal

Given the root of a binary tree, return the postorder traversal of its nodes' values.

ðŸ“˜ Postorder Traversal:
Left â†’ Right â†’ Root

---

ðŸ’¡ Example:
Input: root = [1, null, 2, 3]
Output: [3, 2, 1]

Explanation:
   1
    \
     2
    /
   3
Postorder traversal: 3 â†’ 2 â†’ 1

---

ðŸ§  Approach:
1. Use a helper function `solve()` to recursively traverse the tree.
2. For each node:
   - Recursively visit the left subtree.
   - Recursively visit the right subtree.
   - Add the current nodeâ€™s value to the list.
3. Return the list containing postorder traversal.

---

ðŸ•’ Time Complexity: O(n) â€” visit each node once.
ðŸ’¾ Space Complexity: O(n) â€” recursion stack and output list.
*/

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        solve(root, list);
        return list;
    }

    void solve(TreeNode root, List<Integer> list) {
        if (root == null) return;
        solve(root.left, list);
        solve(root.right, list);
        list.add(root.val);
    }
}
