// DAY 8
// QUESTION: leetcode:3021 (Alice and Bob Playing Flower Game)
//
// Alice and Bob are playing a turn-based game with two lanes of flowers.
// There are x flowers in the first lane and y flowers in the second lane.
//
// RULES:
// - Alice always goes first.
// - In each turn, a player picks exactly ONE flower from ONE lane.
// - If after a move no flowers remain at all, the current player wins.
//
// TASK:
// Count how many pairs (x, y) with:
//   1 <= x <= n
//   1 <= y <= m
// make Alice win the game.
//
// ------- Example 1 -------
// Input: n = 3, m = 2
// Output: 3
// Explanation: Valid pairs are (1,2), (3,2), (2,1)
//
// ------- Example 2 -------
// Input: n = 1, m = 1
// Output: 0
//
// ------- APPROACH -------
// 1. Total moves = (x + y).
// 2. If (x + y) is ODD -> Alice plays last -> Alice wins.
// 3. If (x + y) is EVEN -> Bob plays last -> Bob wins.
// 4. So we need (x odd, y even) OR (x even, y odd).
// 5. Count evens and odds in [1..n] and [1..m].
// 6. Use formula: (neven * modd) + (meven * nodd)
//
// **** Time Complexity(TC): O(1) *****
// **** Space Complexity(SC): O(1) *****
//
// ---------------- CODE ----------------

class Solution {
    public long flowerGame(int n, int m) {
        // count evens in [1..n]
        int neven = n / 2;

        // count odds in [1..n]
        // trick: nodd = (n % 2) + (n / 2)
        int nodd = n % 2;
        nodd += n / 2;

        // count evens in [1..m]
        int meven = m / 2;

        // count odds in [1..m]
        int modd = m % 2;
        modd += m / 2;

        // Alice wins if (x + y) is odd
        long ans = ((long) neven * (long) modd) + ((long) meven * (long) nodd);
        return ans;
    }
}
