/*
88. Merge Sorted Array

📌 Problem Statement
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order,
and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.
The final sorted array should not be returned but stored inside nums1.

nums1 has a length of m + n, where the first m elements denote the elements that should be merged,
and the last n elements are set to 0 and should be ignored.

--------------------------------------------------
💡 Examples

Example 1:
Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6], n = 3
Output:
[1,2,2,3,5,6]

Example 2:
Input:
nums1 = [1], m = 1
nums2 = [], n = 0
Output:
[1]

Example 3:
Input:
nums1 = [0], m = 0
nums2 = [1], n = 1
Output:
[1]

--------------------------------------------------
⚙️ Constraints
- nums1.length == m + n
- nums2.length == n
- 0 <= m, n <= 200
- 1 <= m + n <= 200
- -10^9 <= nums1[i], nums2[j] <= 10^9

--------------------------------------------------
🚀 Approach
1. Copy elements of nums2 into the trailing part of nums1.
2. Sort the entire nums1 array.
   (Not the most optimal, but valid within constraints.)

--------------------------------------------------
⏱️ Complexity Analysis
- Time Complexity: O((m+n) log(m+n)) due to sorting
- Space Complexity: O(1) (in-place)

--------------------------------------------------
✅ Works correctly within constraints.
📌 Can be optimized with two pointers (O(m+n)) instead of sorting.
*/

import java.util.Arrays;

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int j = 0;
        int m1 = nums1.length;

        // Copy nums2 into nums1’s trailing slots
        for (int i = m1 - n; i < m1; i++) {
            nums1[i] = nums2[j];
            j++;
        }

        // Sort nums1 after merging
        Arrays.sort(nums1);
    }
}
