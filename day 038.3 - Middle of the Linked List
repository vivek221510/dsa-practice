### 876. Middle of the Linked List

Find the middle node of a singly linked list.  
If there are two middle nodes, return the **second** middle node.

---

**Example:**
```
Input: head = [1,2,3,4,5]
Output: [3,4,5]
```
```
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
```

---

**Time Complexity:** O(n)  
**Space Complexity:** O(1)

---

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        if(head==null || head.next==null)return head;
        ListNode f=head;
        ListNode s=head;
        while(f.next!=null && f.next.next!=null)
        {
            f=f.next.next; // fast moves 2 steps
            s=s.next;      // slow moves 1 step
        }
        if(f.next==null)   // odd length
            return s;
        return s.next;     // even length â†’ second middle
    }
}
```
