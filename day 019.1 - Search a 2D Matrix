# ðŸš€ LeetCode 74. Search a 2D Matrix â€“ Binary Search Solution in Java

## âœ… Problem Description

You are given an `m x n` integer matrix with the following properties:
1. Each row is sorted in non-decreasing order.
2. The first integer of each row is greater than the last integer of the previous row.

**Task**:  
Given an integer `target`, return `true` if `target` is in the matrix, or `false` otherwise.

---

## âœ… Approach

We can treat the 2D matrix as a **flattened sorted array** and apply **binary search** in **O(log(m * n)) time complexity**.

- Calculate `mid = (low + high) / 2`
- Convert `mid` to 2D indices:  
  `row = mid / m`  
  `col = mid % m`
- Compare `matrix[row][col]` with `target` and adjust search space accordingly.

---

## âœ… Java Solution

```java
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        int low = 0, high = n * m - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            int row = mid / m;
            int col = mid % m;

            if (matrix[row][col] == target) {
                return true;
            } else if (matrix[row][col] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return false;
    }
}
