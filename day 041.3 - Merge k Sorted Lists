/*
ðŸ”¹ Problem: Merge k Sorted Lists

You are given an array of k linked-lists, each linked-list is sorted in ascending order.
Merge all the linked-lists into one sorted linked-list and return it.

Example:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: Merging the given lists results in a single sorted list: 1â†’1â†’2â†’3â†’4â†’4â†’5â†’6

Approach:
- Use a min-heap (PriorityQueue) to efficiently get the smallest node among all current list heads.
- Push the head of each non-null list into the heap.
- Continuously extract the smallest node and attach it to the result list.
- If the extracted node has a next node, push it into the heap.
- Continue until the heap is empty.

Time Complexity: O(N log k)
Space Complexity: O(k)
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        ListNode dummy = new ListNode(-1);
        ListNode cur = dummy;
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);

        for (ListNode x : lists) {
            if (x != null) pq.offer(x);
        }

        while (!pq.isEmpty()) {
            ListNode temp = pq.poll();
            if (temp.next != null) pq.offer(temp.next);
            cur.next = temp;
            cur = cur.next;
        }

        return dummy.next;
    }
}
