// 3217. Delete Nodes From Linked List Present in Array
// Remove all nodes from the linked list whose values are present in the given array.

 /**
  * Definition for singly-linked list.
  * public class ListNode {
  *     int val;
  *     ListNode next;
  *     ListNode() {}
  *     ListNode(int val) { this.val = val; }
  *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
  * }
  */
class Solution {
    public ListNode modifiedList(int[] nums, ListNode head) {
        Set<Integer> set = new HashSet<>();
        int n = nums.length;
        int i = 0;

        // Store all nums in a HashSet for O(1) lookup
        while (i < n) {
            set.add(nums[i]);
            i++;
        }

        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        ListNode cur = dummy;

        // Traverse and remove nodes whose values are in set
        while (cur.next != null) {
            int x = cur.next.val;
            if (set.contains(x)) {
                cur.next = cur.next.next;
            } else {
                cur = cur.next;
            }
        }

        return dummy.next;
    }
}

/*
Example:
Input: nums = [1, 3, 4], head = 1 -> 2 -> 3 -> 4 -> 5
Output: 2 -> 5

Time Complexity: O(N + M)
  - N = number of linked list nodes
  - M = length of nums
Space Complexity: O(M)
*/
