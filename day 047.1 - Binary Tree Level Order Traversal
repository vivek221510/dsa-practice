/*
# üß© Problem: Binary Tree Level Order Traversal

Given the `root` of a binary tree, return the *level order traversal* of its nodes' values.
(That is, from left to right, level by level.)

---

### üîç Example:
**Input:**
root = [3,9,20,null,null,15,7]

**Output:**
[[3],[9,20],[15,7]]

---

### üß† Approach:
We use a **Breadth-First Search (BFS)** traversal with a **queue**.
- Start by pushing the root node into the queue.
- For each level:
  - Record the current queue size (number of nodes at that level).
  - Pop each node, record its value, and enqueue its non-null children.
  - Add the collected values for that level to the final answer.

---

### ‚è±Ô∏è Time Complexity:
O(N) ‚Äî each node is visited exactly once.

### üíæ Space Complexity:
O(N) ‚Äî the queue and result list can together hold all nodes in the tree.

---

### ‚úÖ Full Solution Code:
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) return ans;

        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        while (!q.isEmpty()) {
            int n = q.size();
            List<Integer> level = new ArrayList<>();

            for (int i = 0; i < n; i++) {
                TreeNode node = q.poll();
                level.add(node.val);

                if (node.left != null) q.offer(node.left);
                if (node.right != null) q.offer(node.right);
            }

            ans.add(level);
        }

        return ans;
    }
}
