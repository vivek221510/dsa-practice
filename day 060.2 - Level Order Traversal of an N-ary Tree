/*
💡 Problem: Level Order Traversal of an N-ary Tree

🔍 Description:
Given the root of an N-ary tree, return its level order traversal — 
the values of nodes visited level by level from left to right.

🧩 Example:
Input:
        1
      / | \
     3  2  4
    / \
   5   6
Output: [[1], [3, 2, 4], [5, 6]]

🕒 Time Complexity: O(N)
💾 Space Complexity: O(N)
*/

/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}
    public Node(int _val) { val = _val; }
    public Node(int _val, List<Node> _children) { val = _val; children = _children; }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) return ans;

        Queue<Node> q = new LinkedList<>();
        q.add(root);
        int s = q.size();
        List<Integer> temp = new ArrayList<>();

        while (!q.isEmpty()) {
            Node x = q.poll();
            temp.add(x.val);
            for (Node nd : x.children) {
                if (nd != null) q.add(nd);
            }
            s--;
            if (s == 0) {
                ans.add(new ArrayList<>(temp));
                s = q.size();
                temp = new ArrayList<>();
            }
        }
        return ans;
    }
}
