/**
 * Problem: Maximum Alternating Sum (LeetCode)
 * 
 * Given an integer array nums, the task is to maximize the alternating sum of a subsequence.
 * This solution squares each element, sorts the array, and calculates the sum difference
 * between the larger half and the smaller half to maximize the alternating sum.
 * 
 * Time Complexity: O(n log n) due to sorting
 * Space Complexity: O(1) extra space
 * 
 * Example:
 * Input: nums = [2, 1, 4, 3]
 * Output: 10
 * Explanation: After squaring and sorting: [1, 4, 9, 16]
 *              Sum of smaller half (1+4=5), sum of larger half (9+16=25)
 *              Max alternating sum = 25 - 5 = 20
 */

import java.util.Arrays;

class Solution {
    public long maxAlternatingSum(int[] nums) {
        for(int i = 0; i < nums.length; i++) {
            nums[i] = nums[i] * nums[i]; // square each element
        }
        Arrays.sort(nums); // sort in ascending order
        int n = nums.length;
        long neg = 0;
        long pos = 0;
        for(int i = 0; i < n / 2; i++) {
            neg += nums[i]; // sum of smaller half
        }
        for(int i = n / 2; i < n; i++) {
            pos += nums[i]; // sum of larger half
        }
        return pos - neg; // difference gives max alternating sum
    }
}
