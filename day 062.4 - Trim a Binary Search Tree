/*
ðŸ’¡ **Problem:** Trim a Binary Search Tree

Given the `root` of a Binary Search Tree and two integers `low` and `high`,  
trim the tree so that all its elements lie in the range `[low, high]`.  
Return the new root of the trimmed tree.

---

### Example
Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3  
Output: [3,2,null,1]

---

### Approach
- If `root` is `null`, return `null`.
- If `root.val < low`, discard the left subtree and trim the right subtree.
- If `root.val > high`, discard the right subtree and trim the left subtree.
- Otherwise, recursively trim both subtrees and return `root`.

---

### Complexity
- **Time:** O(n) â€” each node visited once  
- **Space:** O(h) â€” recursion stack (`h` is the height of the tree)

---

### Code
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) return root;
        if (root.val < low) {
            return trimBST(root.right, low, high);
        }
        if (root.val > high) {
            return trimBST(root.left, low, high);
        }
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);
        return root;
    }
}
