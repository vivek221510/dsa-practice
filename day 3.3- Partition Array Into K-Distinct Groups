// QUESTION: leetcode:3659 (Partition Array Into K-Distinct Groups)
// Check if array nums can be partitioned into groups of size k
// such that each group has exactly k distinct elements.
//
// Example 1:
// Input: nums = [1,2,3,4], k = 2
// Output: true
//
// Example 2:
// Input: nums = [3,5,2,2], k = 2
// Output: true
//
// Example 3:
// Input: nums = [1,5,2,3], k = 3
// Output: false
//
// ------- APPROACH -------
// 1. If n % k != 0 → impossible to partition.
// 2. Count frequencies of each element.
// 3. Total groups = n/k. If any element appears more times than groups → return false.
// 4. Otherwise return true.
//
// **** TC: O(n) ****
// **** SC: O(n) ****

class Solution {
    public boolean partitionArray(int[] nums, int k) {
        int n = nums.length;
        if (n % k != 0) return false;   // must divide evenly

        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }

        int groups = n / k;

        // check if any element exceeds allowed frequency
        for (int i = 0; i < n; i++) {
            if (map.get(nums[i]) > groups) return false;
        }

        return true;
    }
}
