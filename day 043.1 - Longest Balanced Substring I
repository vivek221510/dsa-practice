/*
 Longest Balanced Substring I
You are given a string s consisting of lowercase English letters.

A substring of s is called balanced if all distinct characters in the substring appear the same number of times.

Return the length of the longest balanced substring of s.

Example 1:
Input: s = "abbac"
Output: 4
Explanation:
The longest balanced substring is "abba" because both distinct characters 'a' and 'b' each appear exactly 2 times.

Example 2:
Input: s = "zzabccy"
Output: 4
Explanation:
The longest balanced substring is "zabc" because the distinct characters 'z', 'a', 'b', and 'c' each appear exactly 1 time.

Example 3:
Input: s = "aba"
Output: 2
Explanation:
One of the longest balanced substrings is "ab" because both distinct characters 'a' and 'b' each appear exactly 1 time. Another longest balanced substring is "ba".

Constraints:
1 <= s.length <= 1000
s consists of lowercase English letters.

Time Complexity: O(n^2 * 26)
Space Complexity: O(26)
*/

class Solution {
    public int longestBalanced(String s) {
        
        int n=s.length();
        int ans=0;
        for(int i=0;i<n;i++)
            {
                int cnt[]= new int[26];
                for(int j=i;j<n;j++)
                    {
                        char y=s.charAt(j);
                        cnt[y-'a']++;
                        boolean val=true;
                        int t=0;
                        for(int x:cnt)
                            {
                                if(x>0)
                                {
                                    if(t==0)t=x;
                                    else if(t!=x)
                                    {
                                        val=false;
                                        break;
                                    }
                                }
                            }
                        if(val)ans=Math.max(ans,j-i+1);
                        
                    }
                
            }
        return ans;
    }
}
