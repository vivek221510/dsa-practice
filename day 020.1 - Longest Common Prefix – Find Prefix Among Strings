/*
ðŸš€ LeetCode 14. Longest Common Prefix â€“ Find Prefix Among Strings

âœ… Problem Description:
Write a function to find the longest common prefix string among an array of strings.
If there is no common prefix, return an empty string "".

Example 1:
Input: ["flower","flow","flight"]
Output: "fl"

Example 2:
Input: ["dog","racecar","car"]
Output: ""

Constraints:
1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters if it is non-empty.

âœ… Approach:
1. Find the length of the shortest string in the array.
2. Iterate character by character up to the minimum length:
   - Compare the character in all strings at the same position.
   - If all match â†’ append to the result prefix.
   - If any mismatch â†’ stop and return the prefix found so far.
3. Return the prefix as a string.

Time Complexity: O(n * m), where n = number of strings, m = length of shortest string.
Space Complexity: O(m) for storing the output prefix.
*/

class Solution {
    public String longestCommonPrefix(String[] str) {
        int n = str.length;
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            min = Math.min(str[i].length(), min);
        }
        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < min; i++) {
            char c = str[0].charAt(i);
            boolean val = true;
            for (int j = 1; j < n; j++) {
                if (str[j].charAt(i) != c) {
                    val = false;
                    break;
                }
            }
            if (!val)
                break;
            ans.append(c);
        }
        return ans.toString();
    }
}

class Main {
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        String[] input1 = {"flower", "flow", "flight"};
        System.out.println(solution.longestCommonPrefix(input1)); // Output: "fl"
        
        String[] input2 = {"dog", "racecar", "car"};
        System.out.println(solution.longestCommonPrefix(input2)); // Output: ""
    }
}
