// QUESTION: LeetCode 1493. Longest Subarray of 1's After Deleting One Element
// ---------------------------------------------------------------------------
// Given a binary array nums, you should delete exactly one element from it.
// Return the size of the longest non-empty subarray containing only 1's 
// in the resulting array. Return 0 if there is no such subarray.
//
// Example 1:
// Input: nums = [1,1,0,1]
// Output: 3
//
// Example 2:
// Input: nums = [0,1,1,1,0,1,1,0,1]
// Output: 5
//
// Example 3:
// Input: nums = [1,1,1]
// Output: 2
//
// Approach:
// - Store indices of all zeros in a list.
// - If <=1 zero, answer = n-1 (delete one element anyway).
// - Otherwise, calculate max consecutive 1's using gaps between zeros.
// - Check prefix, gaps, and suffix for max subarray length.

import java.util.*;

class Solution {
    public int longestSubarray(int[] nums) {
        int n =nums.length;
        List<Integer> arr= new ArrayList<>();
        for(int i=0;i<n;i++)
        {
            if(nums[i]==0) arr.add(i);
        }
        int ans=0;
        if(arr.size()<=1) return n-1; 
        //if less than two zeros we can take whole array 
        //(but we should also remove one element acc to question),so n-1;
        ans=arr.get(1)-1;
        int n1=arr.size();
        for(int i=2;i<n1;i++)
        {
            ans=Math.max(ans,arr.get(i)-arr.get(i-2)-2); 
            // checks no of elements b/w i-2th zero and ith zero;
        }
        ans=Math.max(n-1-(arr.get(n1-2))-1,ans); 
        // checks no of elements from arr.size()-2 to last element
        return ans;
    }
}
