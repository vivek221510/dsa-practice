# ðŸš€ LeetCode 240. Search a 2D Matrix II â€“ Efficient Search in Sorted Matrix

## âœ… Problem Description

Write an efficient algorithm to search for a value `target` in an `m x n` integer matrix.  
The matrix has the following properties:
1. Integers in each row are sorted in ascending order from left to right.
2. Integers in each column are sorted in ascending order from top to bottom.

---

## âœ… Approach

Use a **greedy search** starting from the top-right corner of the matrix:
- At every step:
    - If the current element equals the target â†’ return `true`.
    - If the current element is less than the target â†’ move down (`low++`).
    - Otherwise â†’ move left (`high--`).
  
This ensures **O(m + n)** time complexity and O(1) space.

---

## âœ… Java Solution

```java
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int n = matrix.length;
        int m = matrix[0].length;
        int low = 0;
        int high = m - 1;

        while (low < n && high >= 0) {
            if (matrix[low][high] == target) {
                return true;
            } else if (matrix[low][high] < target) {
                low++;
            } else {
                high--;
            }
        }

        return false;
    }
}
