/*
üöÄ LeetCode 485: Max Consecutive Ones

‚úÖ Problem Statement:
Given a binary array nums, return the maximum number of consecutive 1's in the array.

Example 1:
Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1's. The maximum number of consecutive 1's is 3.

Example 2:
Input: nums = [1,0,1,1,0,1]
Output: 2
Explanation: The longest consecutive 1's subarray is [1,1].

‚úÖ Solution Approach:
- Initialize cnt = 0 and max = 0.
- Iterate through the array:
    - If current element is 1, increment cnt.
    - Else, update max = Math.max(max, cnt) and reset cnt = 0.
- After the loop, perform a final check: max = Math.max(max, cnt) in case the array ends with 1's.
- Return max.

‚ö°Ô∏è Time Complexity: O(n)
‚ö°Ô∏è Space Complexity: O(1)

‚úÖ Complete Solution:
*/

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int cnt = 0;
        int max = 0;
        int n = nums.length;
        
        for (int i = 0; i < n; i++) {
            if (nums[i] == 1) {
                cnt++;
            } else {
                max = Math.max(max, cnt);
                cnt = 0;
            }
        }
        
        max = Math.max(max, cnt);  // Final check in case the array ends with 1
        return max;
    }
}
