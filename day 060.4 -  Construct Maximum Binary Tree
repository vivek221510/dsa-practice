/*
💡 Problem: Construct Maximum Binary Tree

🔍 Description:
Given an integer array nums, build a binary tree where:
- The root is the maximum element.
- Left subtree is built from elements left of the max.
- Right subtree is built from elements right of the max.

🧩 Example:
Input: [3,2,1,6,0,5]
Output: [6,3,5,null,2,0,null,null,1]

🕒 Time Complexity: O(N²)
💾 Space Complexity: O(N)
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return construct(nums, 0, nums.length - 1);
    }

    TreeNode construct(int[] nums, int l, int h) {
        if (l > h) return null;
        int max = Integer.MIN_VALUE, maxi = -1;

        for (int i = l; i <= h; i++) {
            if (nums[i] > max) {
                max = nums[i];
                maxi = i;
            }
        }

        TreeNode root = new TreeNode(max);
        root.left = construct(nums, l, maxi - 1);
        root.right = construct(nums, maxi + 1, h);
        return root;
    }
}
