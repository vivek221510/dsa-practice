/*
ðŸ’¡ **Problem:** Insert into a Binary Search Tree

Given the `root` of a Binary Search Tree (BST) and a value `val`, insert the value into the BST while maintaining its properties.  
Return the root of the updated BST.

---

### Example
Input: root = [4,2,7,1,3], val = 5  
Output: [4,2,7,1,3,5]

---

### Approach
- If the root is `null`, create a new node with value `val`.
- If `val` is greater than `root.val`, insert it in the right subtree.
- Otherwise, insert it in the left subtree.
- Return the root after insertion.

---

### Complexity
- **Time:** O(h), where `h` is the height of the tree  
- **Space:** O(h) (recursive stack)

---

### Code
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if (root == null) return new TreeNode(val);
        if (root.val < val) {
            root.right = insertIntoBST(root.right, val);
        } else {
            root.left = insertIntoBST(root.left, val);
        }
        return root;
    }
}
