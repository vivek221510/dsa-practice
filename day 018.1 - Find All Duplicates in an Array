// 442. Find All Duplicates in an Array
// Medium | Array | Cyclic Sort | O(n) Time | O(1) Space

// Problem:
// Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears at most twice,
// return an array of all the integers that appears twice.
// You must write an algorithm that runs in O(n) time and uses only constant auxiliary space, excluding the space needed to store the output.

// Example 1:
// Input: nums = [4,3,2,7,8,2,3,1]
// Output: [2,3]

// Example 2:
// Input: nums = [1,1,2]
// Output: [1]

// Example 3:
// Input: nums = [1]
// Output: []

// Constraints:
// n == nums.length
// 1 <= n <= 10^5
// 1 <= nums[i] <= n
// Each element in nums appears once or twice.

import java.util.*;

class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        int i=0;
        int n=nums.length;
        while(i<n)
        {
            int original=nums[i]-1;
            if(nums[original]==nums[i])
            {
                i++;

            }
            else
            {
                int temp=nums[original];
                nums[original]=nums[i];
                nums[i]=temp;
            }
        }
        for(i=0;i<n;i++)
        {
            if(nums[i]!=i+1)
            ans.add(nums[i]);
        }
        return ans;
    }
}
