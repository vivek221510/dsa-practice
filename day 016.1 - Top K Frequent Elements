/*
LeetCode - 347. Top K Frequent Elements
Medium

Given an integer array nums and an integer k, return the k most frequent elements.
You may return the answer in any order.

Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]

Example 3:
Input: nums = [1,2,1,2,1,2,3,1,3,2], k = 2
Output: [1,2]

---------------------------------------------------
Approach: Min-Heap (PriorityQueue)
- Count frequency of each element using HashMap
- Use a min-heap to keep only top k frequent elements
- If heap size > k, remove least frequent element
- Extract remaining elements from heap as answer

Time Complexity: O(n log k)
Space Complexity: O(n)
---------------------------------------------------
*/

import java.util.*;

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        // Min-heap (PriorityQueue) that orders by frequency
        // -> The element with the smallest frequency stays on top
        PriorityQueue<Map.Entry<Integer,Integer>> pq =
            new PriorityQueue<>((a, b) -> a.getValue() - b.getValue());

        // Step 1: Count frequency of each number
        HashMap<Integer,Integer> map = new HashMap<>();
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            // Increase count of nums[i] in map
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }

        // Step 2: Add entries into the heap
        for (var ele : map.entrySet()) {
            pq.add(ele);
            // Maintain only top k elements in the heap
            if (pq.size() > k) {
                pq.poll(); // remove the least frequent element
            }
        }

        // Step 3: Build the answer array from heap
        int[] ans = new int[k];
        int i = 0;
        for (var ele : pq) {
            ans[i] = ele.getKey(); // store the number (key)
            i++;
        }
        return ans;
    }
}
