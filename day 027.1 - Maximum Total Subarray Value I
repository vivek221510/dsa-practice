/*
🚀 Leetcode Q2: Maximum Total Subarray Value I

✅ Problem:
You are given:
- An integer array `nums` of length `n`.
- An integer `k`.

You must choose **exactly k non-empty subarrays** `nums[l..r]`.  
Subarrays may overlap, and the **same subarray can be chosen multiple times**.

- The value of a subarray = `max(nums[l..r]) - min(nums[l..r])`.
- The total value = sum of chosen subarray values.

Return the **maximum possible total value**.

---

🔑 Intuition:
- The **largest possible difference** is between the global maximum and minimum elements in `nums`.
- Since subarrays can be reused, the optimal move is to:
  - Take the subarray containing both global min and max.
  - Repeat this `k` times.

So, result = `k * (max(nums) - min(nums))`.

---

📝 Example 1:
Input: `nums = [1,3,2], k = 2`  
- Global max = 3, min = 1 → difference = 2  
- Choosing twice → `2 + 2 = 4`  
Output: `4`.

📝 Example 2:
Input: `nums = [4,2,5,1], k = 3`  
- Global max = 5, min = 1 → difference = 4  
- Choosing thrice → `4 + 4 + 4 = 12`  
Output: `12`.

---

⏱️ Time Complexity:
- `O(n)` (single scan to find min and max).
📦 Space Complexity:
- `O(1)`.

---

💻 Code (Java):
*/
class Solution {
    public long maxTotalValue(int[] nums, int k) {
        int min = nums[0];
        int max = nums[0];
        
        for (int num : nums) {
            if (num < min) min = num;
            if (num > max) max = num;
        }
        
        return (long) k * (max- min);
    }
}
